---
- name: Ensure required AWS parameters are supplied
  ansible.builtin.assert:
    that:
      - instanceName | default('') | length > 0
      - aws_subnet_id | length > 0
      - aws_region | length > 0
      - (aws_security_group_ids | length > 0) or create_security_group | bool
      - (not create_security_group) or (aws_vpc_id | length > 0)
    fail_msg: >-
      Provide instanceName, aws_subnet_id and either aws_security_group_ids or enable create_security_group with aws_vpc_id.

- name: Normalize Route53 zone name
  ansible.builtin.set_fact:
    normalized_route53_zone: "{{ route53_zone_name | default('') | regex_replace('\\.$', '') }}"

- name: Derive naming conventions from instanceName
  ansible.builtin.set_fact:
    derived_instance_name: "{{ instanceName }}"
    derived_security_group_name: "{{ instanceName }}-ssh"
    derived_keypair_basename: >-
      {{ keypair_basename if keypair_basename | default('') | length > 0 else instanceName }}
    derived_keypair_comment: >-
      {{ keypair_comment if keypair_comment | default('') | length > 0 else instanceName ~ ' via AWX' }}
    derived_vault_secret_path: >-
      {{ vault_secret_path if vault_secret_path | default('') | length > 0 else 'windows/ssh/' ~ instanceName }}
    derived_route53_record: >-
      {{ route53_record if route53_record | default('') | length > 0 else (normalized_route53_zone | length > 0 | ternary(instanceName ~ '.' ~ normalized_route53_zone, instanceName)) }}
    derived_tags: "{{ (aws_tags | default({})) | combine({'Name': instanceName}) }}"

- name: Collect Vault connection settings
  ansible.builtin.set_fact:
    vault_addr_effective: "{{ vault_addr | default(lookup('env', 'VAULT_ADDR'), true) }}"
    vault_namespace_effective: "{{ vault_namespace | default(lookup('env', 'VAULT_NAMESPACE') | default('', true), true) }}"
    vault_ca_bundle_effective: "{{ vault_ca_bundle | default(lookup('env', 'VAULT_CACERT'), true) }}"
    vault_ca_cert_pem: "{{ lookup('env', 'VAULT_CA_CERT_PEM') | default('', true) }}"

- name: Ensure Vault address is available
  ansible.builtin.assert:
    that:
      - vault_addr_effective | length > 0
    fail_msg: Vault address must be provided via vault_addr variable or VAULT_ADDR environment variable.

- name: Ensure Vault CA bundle path is set when PEM provided
  ansible.builtin.assert:
    that:
      - vault_ca_bundle_effective | length > 0
    fail_msg: Set vault_ca_bundle or VAULT_CACERT when injecting VAULT_CA_CERT_PEM.
  when: vault_ca_cert_pem | length > 0

- name: Materialize Vault CA bundle from injected PEM
  ansible.builtin.copy:
    content: "{{ vault_ca_cert_pem }}"
    dest: "{{ vault_ca_bundle_effective }}"
    mode: '0600'
  when:
    - vault_ca_cert_pem | length > 0
    - vault_ca_bundle_effective | length > 0

- name: Coerce runtime booleans and integers
  ansible.builtin.set_fact:
    assign_public_ip_bool: "{{ assign_public_ip | bool }}"
    wait_for_ssh_timeout_int: "{{ wait_for_ssh_timeout | int }}"
    route53_ttl_int: "{{ route53_ttl | int }}"

- name: Build SSH ingress rule set
  ansible.builtin.set_fact:
    ssh_ingress_rules: []
  when: create_security_group | bool

- name: Append SSH ingress rules for declared CIDR blocks
  ansible.builtin.set_fact:
    ssh_ingress_rules: "{{ ssh_ingress_rules + [ {'proto': 'tcp', 'from_port': 22, 'to_port': 22, 'cidr_ip': item} ] }}"
  loop: "{{ ssh_ingress_cidr_blocks }}"
  when: create_security_group | bool

- name: Resolve Windows Server 2025 AMI
  ansible.builtin.set_fact:
    resolved_ami_id: "{{ lookup('amazon.aws.aws_ssm_parameter_store', ami_ssm_parameter, region=aws_region) }}"

- name: Ensure key output directory exists
  ansible.builtin.file:
    path: "{{ key_output_dir }}"
    state: directory
    mode: '0700'

- name: Generate ED25519 keypair for Windows SSH
  community.crypto.openssh_keypair:
    path: "{{ key_output_dir }}/{{ derived_keypair_basename }}"
    type: ed25519
    comment: "{{ derived_keypair_comment }}"
    force: "{{ regenerate_keypair | bool }}"
    mode: '0600'
  register: windows_ssh_keypair
  no_log: true

- name: Read private key from disk when not regenerated
  ansible.builtin.slurp:
    src: "{{ key_output_dir }}/{{ derived_keypair_basename }}"
  register: existing_private_key
  when: windows_ssh_keypair.private_key is not defined
  no_log: true

- name: Collect key material
  ansible.builtin.set_fact:
    private_key_material: >-
      {{ windows_ssh_keypair.private_key
         if windows_ssh_keypair.private_key is defined
         else existing_private_key.content | b64decode }}
    public_key_material: >-
      {{ windows_ssh_keypair.public_key
         if windows_ssh_keypair.public_key is defined
         else lookup('file', key_output_dir ~ '/' ~ derived_keypair_basename ~ '.pub') }}
  no_log: true

- name: Render Windows OpenSSH bootstrap script
  ansible.builtin.set_fact:
    windows_user_data: "{{ lookup('ansible.builtin.template', 'user_data.ps1.j2') }}"
  no_log: true

- name: Create security group for SSH when requested
  amazon.aws.ec2_security_group:
    name: "{{ derived_security_group_name }}"
    description: "SSH access for {{ derived_instance_name }}"
    vpc_id: "{{ aws_vpc_id }}"
    region: "{{ aws_region }}"
    ingress: "{{ ssh_ingress_rules }}"
    purge_rules: true
    purge_rules_egress: false
    tags: "{{ derived_tags }}"
  register: created_sg
  when: create_security_group | bool

- name: Collect security group ids
  ansible.builtin.set_fact:
    effective_security_group_ids: >-
      {{ ([created_sg.group_id]
         if create_security_group | bool
         else aws_security_group_ids) }}

- name: Launch or update Windows instance
  amazon.aws.ec2_instance:
    name: "{{ derived_instance_name }}"
    region: "{{ aws_region }}"
    instance_type: "{{ aws_instance_type }}"
    image_id: "{{ resolved_ami_id }}"
    subnet_id: "{{ aws_subnet_id }}"
    security_group_ids: "{{ effective_security_group_ids }}"
    wait: true
    wait_timeout: 900
    key_name: "{{ omit }}"
    assign_public_ip: "{{ assign_public_ip_bool | bool }}"
    tags: "{{ derived_tags }}"
    volumes:
      - device_name: "{{ aws_root_device_name }}"
        ebs:
          volume_size: "{{ aws_volume_size_gb }}"
          volume_type: "{{ aws_volume_type }}"
          delete_on_termination: true
    user_data: "{{ windows_user_data }}"
  register: ec2_instance

- name: Determine target address for SSH wait
  ansible.builtin.set_fact:
    ssh_wait_host: >-
      {{ ec2_instance.instances[0].public_ip_address
         if assign_public_ip_bool | bool and ec2_instance.instances[0].public_ip_address is defined
         else ec2_instance.instances[0].private_ip_address }}

- name: Wait until sshd is reachable on new instance
  ansible.builtin.wait_for:
    host: "{{ ssh_wait_host }}"
    port: 22
    timeout: "{{ wait_for_ssh_timeout_int | int }}"
    delay: 30
  when: ec2_instance.changed | bool

- name: Store private key in HashiCorp Vault
  community.hashi_vault.vault_kv2_write:
    url: "{{ vault_addr_effective }}"
    ca_cert: "{{ vault_ca_bundle_effective if vault_ca_bundle_effective | length > 0 else omit }}"
    namespace: "{{ vault_namespace_effective if vault_namespace_effective | length > 0 else omit }}"
    auth_method: approle
    role_id: "{{ vault_role_id }}"
    secret_id: "{{ vault_secret_id }}"
    mount_point: "{{ vault_kv_mount }}"
    path: "{{ derived_vault_secret_path }}"
    data:
      private_key: "{{ private_key_material }}"
      public_key: "{{ public_key_material }}"
      instance_id: "{{ ec2_instance.instances[0].instance_id }}"
      instance_public_ip: "{{ ec2_instance.instances[0].public_ip_address | default('') }}"
      instance_private_ip: "{{ ec2_instance.instances[0].private_ip_address }}"
      region: "{{ aws_region }}"
      metadata: "{{ vault_secret_metadata }}"
  no_log: true

- name: Remove local private key material
  ansible.builtin.file:
    path: "{{ key_output_dir }}/{{ derived_keypair_basename }}"
    state: absent

- name: Remove local public key material
  ansible.builtin.file:
    path: "{{ key_output_dir }}/{{ derived_keypair_basename }}.pub"
    state: absent

- name: Optionally create Route53 A record
  amazon.aws.route53:
    state: present
    zone: "{{ normalized_route53_zone if (route53_zone_id | default('') | length == 0 and normalized_route53_zone | length > 0) else omit }}"
    zone_id: "{{ route53_zone_id if (route53_zone_id | default('') | length > 0) else omit }}"
    record: "{{ derived_route53_record }}"
    type: A
    ttl: "{{ route53_ttl_int | int }}"
    overwrite: true
    value: "{{ ssh_wait_host }}"
  when: route53_enabled | bool

- name: Display connection details
  ansible.builtin.debug:
    msg:
      instance_id: "{{ ec2_instance.instances[0].instance_id }}"
      public_ip: "{{ ec2_instance.instances[0].public_ip_address | default('N/A') }}"
      private_ip: "{{ ec2_instance.instances[0].private_ip_address }}"
      ssh_user: "{{ windows_admin_username }}"
      vault_secret: "{{ vault_kv_mount }}/data/{{ derived_vault_secret_path }}"
      route53_record: "{{ derived_route53_record if route53_enabled | bool else 'Route53 disabled' }}"
